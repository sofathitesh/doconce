#!/usr/bin/env python
import os, sys
from commands import getstatusoutput
from doconce.misc import system, option
from doconce.misc import (
    insertdocstr,
    spellcheck,
    #sphinx_dir,
    gwiki_figsubst,
    latin2html,
    remove_inline_comments,
    sphinxfix_localURLs,
    old2new_format,
    latex_header,
    latex_footer,
    replace_from_file,
    replace,
    subst,
    wildcard_notation,
    teamod,
    list_labels,
    split_rst,
    slides_html,
    split_html,
    slides_beamer,
    html_colorbullets,
    md2html,
    md2latex,
    bbl2rst,
    change_encoding,
    guess_encoding,
    clean,
    remove_exercise_answers,
    remove,
    grab,
    ptex2tex,
    expand_commands,
    combine_images,
    latex_exercise_toc,
    pygmentize,
    makefile,
    latex2doconce,
    latex_dislikes,
    fix_bibtex4publish,
    diff,
    gitdiff,
    csv2table,
    )

def remove_options_from_command_line():
    """Remove options (--name) from sys.argv."""
    opts_index = [i for i in range(len(sys.argv))
                  if sys.argv[i].startswith('--')]
    for i in opts_index:
        del sys.argv[i]

def format():
    """
    Run the doconce module on a file (with extension .do.txt) in Doconce format
    and produce another format (latex, html, plain text, reStructuredText, ...)::

       doconce format html mydoc.do.txt
    """

    try:
        import doconce.doconce
    except ImportError:
        # use local doconce module in the doconce package source:
        try:
            thisdir = os.path.dirname(sys.argv[0])
            doconce_lib = os.path.join(thisdir, os.pardir, 'lib', 'doconce')
            sys.path.insert(0, doconce_lib)
            import doconce.doconce
            print 'Successfull import of doconce locally'
        except ImportError, e:
            print e
            print 'Could not import doconce from directory\n', os.getcwd()
            sys.exit(1)

    doconce.doconce.format_driver()



# sphinx_dir must be defined here because it imports sphinx,
# and in misc.py this is interpreted as the local doconce sphinx.py
# file...

def _usage_sphinx_dir():
    print 'Usage: doconce sphinx_dir author="name(s) of author" title="the full title of the document" short-title="some short title" version=0.1 theme=themename dirname=sphinx-rootdir  doconcefile'
    print """

The steps for copying files to sphinx-rootdir and compiling the document
is done by an automatically generated script:

  python automake_sphinx.py [doconce options]

The master file can be split into parts. Here is the typical code
after running doconce sphinx_dir:

  doconce format sphinx master
  doconce split_rst master
  python automake_sphinx.py
"""

import time, shutil, glob, re  # used in sphinx_dir

def sphinx_dir():
    if len(sys.argv) < 2:
        _usage_sphinx_dir()
        sys.exit(1)

    # Grab title, author, version from the command line
    # (set default values first)
    title = short_title = author = None
    version = '1.0'
    theme = 'default'
    doconce_files = []
    sphinx_rootdir = 'sphinx-rootdir'
    conf_py = None
    theme_dir = None
    logo = None
    for arg in sys.argv[1:]:
        if arg.startswith('title='):
            title = arg.split('=')[1]
        elif arg.startswith('short-title='):
            short_title = arg.split('=')[1]
        elif arg.startswith('author='):
            author = arg.split('=')[1]
        elif arg.startswith('version='):
            version = arg.split('=')[1]
        elif arg.startswith('dirname='):
            sphinx_rootdir = arg.split('=')[1]
        elif arg.startswith('theme='):
            theme = arg.split('=')[1]
        elif arg.startswith('conf.py='):
            conf_py = arg.split('=')[1]
        elif arg.startswith('theme_dir='):
            theme_dir = arg.split('=')[1]
        elif arg.startswith('logo='):
            logo = arg.split('=')[1]
        else:
            doconce_files.append(arg)

    if not doconce_files:
        print 'must have (at least one) doconce file as argument'
        print 'doconce sphinx_dir somefile.do.txt'
        sys.exit(1)
    try:
        import sphinx
    except ImportError:
        print 'Unable to import sphinx. Install sphinx from sphinx.pocoo.org.'
        print 'On Debian systems, install the \'python-sphinx\' package.'
        sys.exit(1)
    if float(sphinx.__version__[:3]) < 1.1:
        print 'Abort: sphinx version >= 1.1 required'
        sys.exit(1)

    if len(doconce_files) > 1:
        print 'can only specify one main doconce file'
        sys.exit(1)
    filename = doconce_files[0]
    if filename.endswith('do.txt'):
        filename = filename[:-7]
    else:
        if not os.path.isfile(filename + '.do.txt'):
            print '%s.do.txt does not exist' % filename
            sys.exit(1)

    parts = glob.glob('._part*_%s.rst' % filename)
    parts = [part[:-4] for part in sorted(parts)]

    if title is None:
        print 'searching for TITLE in %s.do.txt' % filename
        f = open(filename + '.do.txt', 'r'); fstr = f.read(); f.close()
        if 'TITLE:' in fstr:
            for line in fstr.splitlines():
                if line.startswith('TITLE:'):
                    title = line[6:].strip()
                    print 'Using title "%s" from' % title, filename
    if title is None:
        print '\nNo TITLE: line found in %s.do.txt' % filename
        print 'and no title="..." given on the command line'
        sys.exit(1)

    if short_title is None:
        # Default is to use title
        short_title = title

    if author is None:
        import doconce.doconce
        f = open(filename + '.do.txt', 'r'); fstr = f.read(); f.close()
        # The following can be misleading if there are examples on
        # various AUTHOR: in e.g. vertabim code in the .do.txt file
        authors_and_institutions, dummy1, dummy2, dummy3, dummy4, dummy5 = \
                  doconce.doconce.interpret_authors(fstr, 'sphinx')
        if authors_and_institutions:
            author = [a for a, i, e in authors_and_institutions]

            print 'Author:', author
            if len(author) == 1:
                author = author[0]
            else:
                author = ', '.join(author[:-1]) + ' and ' + author[-1]
            print 'Using author(s) "%s" from' % author, filename

    if author is None:
        print '\nNo AUTHOR: line found in %s.do.txt' % filename
        print 'and no author="..." given on the command line'
        sys.exit(1)

    if theme_dir is not None and conf_py is None:
        print 'theme_dir is given, but then also conf_py must be specified'
        print 'Abort!'
        sys.exit(1)

    print 'title:', title
    print 'author:', author
    print 'theme:', theme,
    print
    time.sleep(1.5)

    f = open('tmp_sphinx_gen.sh', 'w')
    f.write("""\
#!/bin/bash
rm -rf %(sphinx_rootdir)s
echo Making %(sphinx_rootdir)s
mkdir %(sphinx_rootdir)s
sphinx-quickstart <<EOF
%(sphinx_rootdir)s
n
_
%(title)s
%(author)s
%(version)s
%(version)s
1.0
.rst
index
n
y
n
n
n
n
y
n
n
y
y
y
EOF
""" % vars())
    f.close()
    system('sh tmp_sphinx_gen.sh', failure_info='to generate sphinx directory')
    os.remove('tmp_sphinx_gen.sh')
    os.chdir(sphinx_rootdir)

    if theme_dir is None:
        # Copy themes
        import doconce.common
        install_dir = doconce.common.where()
        shutil.copy(os.path.join(install_dir, 'sphinx_themes.zip'), os.curdir)
        system('unzip sphinx_themes.zip > /dev/null')
        os.remove('sphinx_themes.zip')
        os.rename('sphinx_themes', '_themes')
        files = sorted(glob.glob(os.path.join('_themes', '*')))
        themes = [name[8:] for name in files
                  if os.path.isdir(name)] + ['default']
        print 'These Sphinx themes were found:', ', '.join(themes)

        if conf_py is None:
            make_conf_py(themes, theme, title, short_title, author, logo)
    else:
        # Copy theme_dir
        os.mkdir('_themes')
        shutil.copy(theme_dir, os.path.join('_themes', theme_dir))

    if conf_py is not None:
        shutil.copy(os.path.join(os.pardir, conf_py), os.basename(conf.py))

    f = open('make_themes.sh', 'w')
    f.write("""#!/bin/sh
# Make all themes given on the command line (or if no themes are
# given, make all themes in _themes/)

if [ $# -gt 0 ]; then
    themes=$@
else
    themes="%s"
fi

for theme in $themes; do
    echo "building theme $theme..."
    doconce subst -m "^html_theme =.*$" "html_theme = '$theme'" conf.py
    make clean
    make html
    mv -f _build/html sphinx-$theme
done
echo
echo "Here are the built themes:"
ls -d sphinx-*
echo "for i in sphinx-*; do google-chrome $i/index.html; done"

""" % (' '.join(themes)))
    f.close()
    os.chmod('make_themes.sh', 0755)

    f = open('index.rst', 'w')
    if parts:
        files = parts
    else:
        files = [filename]
    filenames = '\n   '.join(files)
    title_underline = '='*len(title)
    f.write("""
.. Master file automatically created by doconce sphinx_dir

%(title)s
%(title_underline)s

Contents:

.. toctree::
   :maxdepth: 2

   %(filenames)s


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
""" % vars())
    f.close()
    os.chdir(os.pardir)
    f = open('automake_sphinx.py', 'w')
    f.write('''\
#!/usr/bin/env python
# Autogenerated file (by doconce sphinx_dir)
# Purpose: create HTML Sphinx version of %(filename)s

# Command-line arguments are transferred to the doconce format sphinx file
# compilation command

import glob, sys, os, commands, shutil

command_line_options = ' '.join(['"%%s"' %% arg for arg in sys.argv[1:]])

sphinx_rootdir = '%(sphinx_rootdir)s'

def system(cmd, capture_output=False, echo=True):
    if echo:
        print 'running', cmd
    if capture_output:
        failure, outtext = commands.getstatusoutput(cmd) # Unix/Linux only
    else:
        failure = os.system(cmd)
    if failure:
        print 'Could not run', cmd
        sys.exit(1)
    if capture_output:
        return outtext
''' % vars())
    if parts == []:
        f.write('''
filename = '%(filename)s'
if not os.path.isfile(filename + '.rst'):
    # Filter doconce format to sphinx format and copy to sphinx directory
    cmd = 'doconce format sphinx %%s %%s' %% (filename, command_line_options)
    print cmd
    system(cmd)

    # Fix: utf-8 encoding for non-English chars
    cmd = 'doconce guess_encoding %%s.rst' %% filename
    enc = system(cmd, capture_output=True)
    if enc == "iso-8859-1":
        # sphinx does not like non-English characters in iso-8859-1
        system('doconce change_encoding iso-8859-1 utf-8 %%s.rst' %% filename)

# Copy generated sphinx file to sphinx root directory
shutil.copy('%%s.rst' %% filename, sphinx_rootdir)
''' % vars())
    else:
        # user has run doconce split_rst so all parts must be copied
        parts_names = str(parts)
        f.write('''
# Copy generated sphinx files to sphinx root directory
filename = '%(filename)s'
shutil.copy('%%s.rst' %% filename, sphinx_rootdir)
for part in %(parts_names)s:
    shutil.copy('%%s.rst' %% part, sphinx_rootdir)
''' % vars())

    f.write('''
# Copy figures and movies directories
figdirs = glob.glob('fig*') + glob.glob('mov*')
for figdir in figdirs:
    destdir = os.path.join(sphinx_rootdir, figdir)
    if os.path.isdir(figdir) and not os.path.isdir(destdir):
        print 'copying', figdir, 'to', sphinx_rootdir
        shutil.copytree(figdir, destdir)

# Copy needed media files in current dir (not in fig* and mov*)
for rstfile in [os.path.join(sphinx_rootdir, filename + '.rst')]:
    f = open(rstfile, 'r')
    text = text_orig = f.read()
    f.close()
    import re
    media_files = [name.strip() for name in
                   re.findall('.. figure:: (.+)', text)]
    local_media_files = [name for name in media_files if not os.sep in name]

    for name in media_files:
        basename = os.path.basename(name)
        if name.startswith('http') or name.startswith('ftp'):
            pass
        else:
            if not os.path.isfile(os.path.join(sphinx_rootdir, basename)):
                print 'copying', name, 'to', sphinx_rootdir
                shutil.copy(name, sphinx_rootdir)
            if name not in local_media_files:
                # name lies in another directory, make local reference to it
                # since it is copied to sphinx_rootdir
                text = text.replace('.. figure:: %%s' %% name,
                                    '.. figure:: %%s' %% basename)
    if text != text_orig:
        f = open(rstfile, 'w')
        f.write(text)
        f.close()

# Copy linked local files, placed in _static*, to %(sphinx_rootdir)s/_static
staticdirs = glob.glob('_static*')
for staticdir in staticdirs:
    system('cp -r %%s/* %(sphinx_rootdir)s/_static/' %% staticdir)
    # (Note: must do cp -r since shutil.copy/copytree cannot copy a la cp -r)

# Compile web version of the sphinx document
os.chdir(sphinx_rootdir)
print os.getcwd()
system('make clean')
system('make html')

print 'Fix generated files:'
os.chdir('_build/html')
for filename in glob.glob('*.html'):
    # Fix double title in <title> tags
    system('doconce subst "<title>(.+?) &mdash;.+?</title>" "<title>\g<1></title>" %%s' %% filename, echo=False)
    # Fix admonition style
    system("""doconce replace "</head>" "
   <style type="text/css">
     div.admonition {
       background-color: whiteSmoke;
       border: 1px solid #bababa;
     }
   </style>
  </head>
" %%s""" %% filename, echo=False)
    os.remove(filename + '.old~')
print """
google-chrome %(sphinx_rootdir)s/_build/html/index.html
"""
''' % vars())
    f.close()
    os.chmod('automake_sphinx.py', 0755)
    print """
'automake_sphinx.py' contains the steps to (re)compile the sphinx
version. You may want to edit this file, or run the steps manually,
or just run it by

  python automake_sphinx.py
"""

def make_conf_py(themes, theme, title, short_title, author, logo):
    f = open('conf.py', 'r');  text = f.read();  f.close()
    themes_list = ["html_theme = '%s'" % theme] + \
                  ["#html_theme = '%s'" % t for t in themes]
    themes_code = r"""

check_additional_themes = [
   'solarized', 'cloud', 'redcloud',
   'bootstrap', 'impressjs']

for theme in check_additional_themes:
    if html_theme == theme:
        if not theme in additional_themes_installed:
            raise ImportError(
                'html_theme = "%s", but this theme is not '\
                'installed.\n%s' % (theme, additional_themes_url[theme]))

if html_theme == 'solarized':
    pygments_style = 'solarized'

"""
    text = text.replace("html_theme = 'default'",
                        '\n'.join(themes_list) + themes_code)
    # Include bootstrap path if we have that module
    try:
        import sphinx_bootstrap_theme
        bootstrap = ' + sphinx_bootstrap_theme.get_html_theme_path()'
    except ImportError:
        bootstrap = ''
    text = text.replace("#html_theme_path = []",
                        "html_theme_path = ['_themes']%s" % bootstrap)
    extensions = """\
extensions = [
          #'sphinx.ext.pngmath',
          #'sphinx.ext.jsmath',
          'sphinx.ext.mathjax',
          #'matplotlib.sphinxext.mathmpl',
          'matplotlib.sphinxext.only_directives',
          'matplotlib.sphinxext.plot_directive',
          'sphinx.ext.autodoc',
          'sphinx.ext.doctest',
          'sphinx.ext.viewcode',
          'sphinx.ext.intersphinx',
          'sphinx.ext.inheritance_diagram']

#pngmath_dvipng_args = ['-D 200', '-bg Transparent', '-gamma 1.5']  # large math fonts (200)

#intersphinx_mapping = {}
# Example configuration for intersphinx: refer to the Python standard library.
# (Domos in http://scipy-lectures.github.com/)
'''
intersphinx_mapping = {
    _python_doc_base: None,
    'http://docs.scipy.org/doc/numpy': None,
    'http://docs.scipy.org/doc/scipy/reference': None,
    'http://matplotlib.org/': None,
}
'''


# Check which additional themes that are installed
additional_themes_installed = []
additional_themes_url = {}

try:
    import sphinxjp.themes.solarized
    extensions += ['sphinxjp.themecore', 'sphinxjp.themes.solarized']
    additional_themes_installed.append('solarized')
except ImportError:
    additional_themes_url['solarized'] = 'https://bitbucket.org/miiton/sphinxjp.themes.solarized'

try:
    import cloud_sptheme as csp
    additional_themes_installed.append('cloud')
    additional_themes_installed.append('redcloud')
except ImportError:
    url = 'https://bitbucket.org/ecollins/cloud_sptheme'
    additional_themes_url['cloud'] = url
    additional_themes_url['redcloud'] = url

'''
# FIXME: think we do not need to test on basicstrap, but some themes
# need themecore and we must test for that
try:
    import sphinxjp.themecore
    if not 'sphinxjp.themecore' in extensions:
        extensions += ['sphinxjp.themecore']
    additional_themes_installed.append('basicstrap')
except ImportError:
    # Use basicstrap as an example on a theme with sphinxjp.themecore (??)
    additional_themes_url['basicstrap'] = 'https://github.com/tell-k/sphinxjp.themes.basicstrap'
'''

try:
    import sphinxjp.themes.impressjs
    additional_themes_installed.append('impressjs')
    if not 'sphinxjp.themecore' in extensions:
        extensions += ['sphinxjp.themecore']
except ImportError:
    additional_themes_url['impressjs'] = 'https://github.com/shkumagai/sphinxjp.themes.impressjs'

try:
    import sphinx_bootstrap_theme
    additional_themes_installed.append('bootstrap')
except ImportError:
    additional_themes_url['bootstrap'] = 'https://github.com/ryan-roemer/sphinx-bootstrap-theme'

"""

    #'matplotlib.sphinxext.ipython_directive',
    #'matplotlib.sphinxext.ipython_console_highlighting',
    # are now in IPython, but not installed as Python modules

    text = re.sub(r'extensions = .*\]', extensions, text)
    text = text.replace('#html_theme_options = {}', """\

# See http://sphinx.pocoo.org/theming.html for options
if html_theme == 'default':
    # pygments_style =
    html_theme_options = {
       'rightsidebar': 'false',  # 'true'
       'stickysidebar': 'false', # Make the sidebar "fixed" so that it doesn't scroll out of view for long body content.  This may not work well with all browsers.  Defaults to false.
       'collapsiblesidebar': 'false', # Add an *experimental* JavaScript snippet that makes the sidebar collapsible via a button on its side. *Doesn't work together with "rightsidebar" or "stickysidebar".* Defaults to false.
       'externalrefs': 'false', # Display external links differently from internal links.  Defaults to false.
       # For colors and fonts, see default/theme.conf for default values
       #'footerbgcolor':    # Background color for the footer line.
       #'footertextcolor:'  # Text color for the footer line.
       #'sidebarbgcolor':   # Background color for the sidebar.
       #'sidebarbtncolor':  # Background color for the sidebar collapse button (used when *collapsiblesidebar* is true).
       #'sidebartextcolor': # Text color for the sidebar.
       #'sidebarlinkcolor': # Link color for the sidebar.
       #'relbarbgcolor':    # Background color for the relation bar.
       #'relbartextcolor':  # Text color for the relation bar.
       #'relbarlinkcolor':  # Link color for the relation bar.
       #'bgcolor':          # Body background color.
       #'textcolor':        # Body text color.
       #'linkcolor':        # Body link color.
       #'visitedlinkcolor': # Body color for visited links.
       #'headbgcolor':      # Background color for headings.
       #'headtextcolor':    # Text color for headings.
       #'headlinkcolor':    # Link color for headings.
       #'codebgcolor':      # Background color for code blocks.
       #'codetextcolor':    # Default text color for code blocks, if not set differently by the highlighting style.
       #'bodyfont':         # Font for normal text.
       #'headfont':         # Font for headings.
    }

elif html_theme == 'sphinxdoc':
    html_theme_options = {
       'nosidebar': 'false',  # 'true'
    }

elif html_theme == 'scrolls':
    pass
    #html_theme_options = {
       #'headerbordercolor':,
       #'subheadlinecolor:',
       #'linkcolor':,
       #'visitedlinkcolor':
       #'admonitioncolor':
    #}

elif html_theme == 'agogo':
    pass
    # See http://sphinx.pocoo.org/theming.html for options

elif html_theme == 'nature':
    html_theme_options = {
       'nosidebar': 'false',  # 'true'
    }

elif html_theme == 'traditional':
    html_theme_options = {
       'nosidebar': 'false',  # 'true'
    }

elif html_theme == 'haiku':
    pass
    # See http://sphinx.pocoo.org/theming.html for options

    html_theme_options = {
       'nosidebar': 'false',  # 'true'
    }

elif html_theme == 'basicstrap':
    html_theme_options = {
       'rightsidebar': 'false',  # 'true'
    }

elif html_theme == 'bootstrap':
    html_theme_options = {
        # Global TOC depth for "site" navbar tab. (Default: 1)
        # Switching to -1 shows all levels.
        'globaltoc_depth': 2,

        # HTML navbar class (Default: "navbar") to attach to <div> element.
        # For black navbar, do "navbar navbar-inverse"
        'navbar_class': "navbar navbar-inverse",

        # Fix navigation bar to top of page?
        # Values: "true" (default) or "false"
        'navbar_fixed_top': "true",

        # Location of link to source.
        # Options are "nav" (default), "footer" or anything else to exclude.
        'source_link_position': "nav",

        # TODO: Future.
        # Add page navigation to it's own navigation bar.
        #'navbar_page_separate': True,
    }

elif html_theme == 'scipy_lectures':
    # inherits the default theme and has all those options
    # set rightsidebar to true and nodesidebar to true to get
    # sidebar with the matching colors
    html_theme_options = {
        'nosidebar': 'true',
        'rightsidebar': 'false',
        'sidebarbgcolor': '#f2f2f2',
        'sidebartextcolor': '#20435c',
        'sidebarlinkcolor': '#20435c',
        'footerbgcolor': '#000000',
        'relbarbgcolor': '#000000',
    }

elif html_theme == 'cbc':
    pygments_style = "friendly"
    html_logo = "cbc_logo.png"






""")

    # Examples on settings: http://pylit.berlios.de/conf.py.html

    text = re.sub('#html_use_index =.+', """
if html_theme == 'impressjs':
    html_use_index = False
""", text)

    text = text.replace('#html_title = None',
                        'html_title = "%s"' % title)
    text = text.replace('#short_html_title = None',
                        'html_short_title = "%s"' % short_title)
    if isinstance(logo, basestring):
        text = text.replace('#html_logo = None', 'html_logo = "%s"' % logo)

    f = open('conf.py', 'w');  f.write(text);  f.close()


# -----------------------------------------------------------------------

commands = """
format
help
sphinx_dir
subst
replace
replace_from_file
clean
spellcheck
ptex2tex
expand_commands
combine_images
guess_encoding
change_encoding
gwiki_figsubst
md2html
remove_inline_comments
grab
remove
remove_exercise_answers
split_rst
split_html
slides_html
slides_beamer
latin2html
latex_header
latex_footer
bbl2rst
html_colorbullets
list_labels
teamod
sphinxfix_localURLs
make_figure_code_links
latex_exercise_toc
insertdocstr
old2new_format
latex2doconce
latex_dislikes
pygmentize
makefile
diff
gitdiff
fix_bibtex4publish
csv2table
""".split()

# -----------------------------------------------------------------------

def help():
    print r"""

# transform doconce file to another format
doconce format html|latex|pdflatex|rst|sphinx|plain|gwiki|mwiki|cwiki|pandoc|st|epytext file.do.txt

# substitute a phrase by another using regular expressions
doconce subst [-s -m -x --restore] regex-pattern regex-replacement file1 file2 ...
(-s is the re.DOTALL modifier, -m is the re.MULTILINE modifier,
 -x is the re.VERBOSE modifier, --restore copies backup files back again)

# replace a phrase by another literally
doconce replace from-text to-text file1 file2 ...
(exact text substutition)

# doconce replace using from and to phrases from file
doconce replace_from_file file-with-from-to file1 file2 ...
(exact text substitution, but a set of from-to relations)

# gwiki format requires substitution of figure file names by URLs
doconce gwiki_figsubst file.gwiki URL-of-fig-dir

# remove all inline comments in a doconce file
doconce remove_inline_comments file.do.txt

# create a directory for the sphinx format
doconce sphinx_dir author='John Doe' title='Long title' \
    short_title="Short title" version=0.1 \
    dirname=sphinx-rootdir theme=default logo=mylogo.png \
    do_file [do_file2 do_file3 ...]
(requires sphinx version >= 1.1)

# replace latex-1 (non-ascii) characters by html codes
doconce latin2html file.html

# walk through a directory tree and insert doconce files as
# docstrings in *.p.py files
doconce insertdocstr rootdir

# remove all files that the doconce format can regenerate
doconce clean

# print the header (preamble) for latex file
doconce latex_header

# print the footer for latex files
doconce latex_footer

# change encoding
doconce change_encoding utf-8 latin1 filename

# guess the encoding in a text
doconce guess_encoding filename

# transform a .bbl file to a .rst file with reST bibliography format
doconce bbl2rst file.bbl

# split a sphinx/rst file into parts
doconce format sphinx complete_file
doconce split_rst complete_file        # !split delimiters
doconce sphinx_dir complete_file
python automake_sphinx.py

# edit URLs to local files and place them in _static
doconce sphinxfix_local_URLs file.rst

# split an html file into parts according to !split commands
doconce split_html complete_file.html

# create HTML slides from a (doconce) html file
doconce slides_html slide_type complete_file.html

# create LaTeX Beamer slides from a (doconce) latex/pdflatex file
doconce slides_beamer complete_file.tex

# replace bullets in lists by colored bullets
doconce html_colorbullets file1.html file2.html ...

# grab selected text from a file
doconce grab   --from[-] from-text [--to[-] to-text] somefile

# remove selected text from a file
doconce remove --from[-] from-text [--to[-] to-text] somefile

# run spellcheck on a set of files
doconce spellcheck [-d .mydict.txt] *.do.txt

# transform ptex2tex files (.p.tex) to ordinary latex file
# and manage the code environments
doconce ptex2tex mydoc -DMINTED pycod=minted sys=Verbatim \
        dat=\begin{quote}\begin{verbatim};\end{verbatim}\end{quote}

# make HTML file via pandoc from Markdown (.md) file
doconce md2html file

# make LaTeX file via pandoc from Markdown (.md) file
doconce md2latex file

# expand short cut commands to full form in files
doconce expand_commands file1 file2 ...

# combine several images into one
doconce combine_images image1 image2 ... output_file

# insert a table of exercises in a latex file myfile.p.tex
doconce latex_exercise_toc myfile

# list all labels in a document (for purposes of cleaning them up)
doconce list_labels myfile

# translate a latex document to doconce (requires usually manual fixing)
doconce latex2doconce latexfile

# check if there are problems with translating latex to doconce
doconce latex_dislikes latexfile

# typeset a doconce document with pygments (for pretty print of doconce itself)
doconce pygmentize myfile [pygments-style]

# generate a make.sh script for translating a doconce file to various formats
doconce makefile docname doconcefile [html sphinx pdflatex ...]

# fix common problems in bibtex files for publish import
doconce fix_bibtex4publish file1.bib file2.bib ...

# find differences between two files
doconce diff file1.do.txt file2.do.txt [diffprog]
(diffprog can be difflib, diff, pdiff, latexdiff, kdiff3, diffuse, ...)

# find differences between the last two Git versions of several files
doconce gitdiff file1 file2 file3 ...

# convert csv file to doconce table format
doconce csv2table somefile.csv
"""
#doconce teamod name
#doconce assemble name master.do.txt


def main():
    if len(sys.argv) == 1 or option('help'):
        print 'Usage: doconce command [optional arguments]'
        print 'commands: %s' % (' '.join(commands))
        help()
        sys.exit(1)

    command = sys.argv[1]
    del sys.argv[1]
    if command == '2format':
        command = 'format'
    if command == 'format':
        # For backward compatibility:
        if len(sys.argv) >= 2 and sys.argv[1] == 'LaTeX':
            sys.argv[1] = 'latex'
            print '\nWarning: Previous format LaTeX now has the name latex\n'
        if len(sys.argv) >= 2 and sys.argv[1] == 'HTML':
            sys.argv[1] = 'html'
            print '\nWarning: Previous format HTML now has the name html\n'

    # Treat wrong command name
    found = False
    if command in commands:
        found = True
        eval(command + '()')
    if not found:
        if command in ('html', 'latex', 'sphinx', 'rst', 'plain', 'gwiki', \
           'mwiki', 'epydoc', 'pandoc'):
            print 'command', command, 'is not a legal command for doconce, did you mean'
            print 'doconce format %s %s?' % (command, ' '.join(sys.argv[1:]))
        else:
            print 'command "%s" is not legal, must be among\n' % command
            print ', '.join(commands)

main()

