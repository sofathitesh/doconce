<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.9 -->
<document ids="doconce-quick-reference" names="doconce\ quick\ reference" source="quickref.rst" title="Doconce Quick Reference"><title>Doconce Quick Reference</title><docinfo><author>Hans Petter Langtangen</author><date>Dec 25, 2012</date></docinfo><comment xml:space="preserve">Automatically generated reST file from Doconce source
(http://code.google.com/p/doconce/)</comment><topic classes="contents" ids="table-of-contents" names="table\ of\ contents"><title>Table of Contents</title><bullet_list><list_item><paragraph><reference ids="id1" refid="supported-formats">Supported Formats</reference></paragraph></list_item><list_item><paragraph><reference ids="id2" refid="title-authors-and-date">Title, Authors, and Date</reference></paragraph></list_item><list_item><paragraph><reference ids="id3" refid="section-types">Section Types</reference></paragraph></list_item><list_item><paragraph><reference ids="id4" refid="inline-formatting">Inline Formatting</reference></paragraph></list_item><list_item><paragraph><reference ids="id5" refid="lists">Lists</reference></paragraph></list_item><list_item><paragraph><reference ids="id6" refid="comments">Comments</reference></paragraph></list_item><list_item><paragraph><reference ids="id7" refid="verbatim-computer-code">Verbatim/Computer Code</reference></paragraph></list_item><list_item><paragraph><reference ids="id8" refid="latex-mathematics">LaTeX Mathematics</reference></paragraph></list_item><list_item><paragraph><reference ids="id9" refid="figures-and-movies">Figures and Movies</reference></paragraph></list_item><list_item><paragraph><reference ids="id10" refid="tables">Tables</reference></paragraph></list_item><list_item><paragraph><reference ids="id11" refid="labels-references-citations-and-index">Labels, References, Citations, and Index</reference></paragraph></list_item><list_item><paragraph><reference ids="id12" refid="capabilities-of-the-doconce-program">Capabilities of the &quot;doconce&quot; Program</reference></paragraph></list_item><list_item><paragraph><reference ids="id13" refid="exercises">Exercises</reference></paragraph></list_item><list_item><paragraph><reference ids="id14" refid="labels-index-and-citations">Labels, Index, and Citations</reference></paragraph></list_item><list_item><paragraph><reference ids="id15" refid="preprocessing">Preprocessing</reference></paragraph></list_item><list_item><paragraph><reference ids="id16" refid="resources">Resources</reference></paragraph></list_item></bullet_list></topic><comment xml:space="preserve">Very preliminary</comment><paragraph><strong>WARNING: This quick reference is very incomplete!</strong></paragraph><section ids="supported-formats" names="supported\ formats"><title refid="id1">Supported Formats</title><paragraph>Doconce currently translates files to the following formats:</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>LaTeX (format <literal>latex</literal> and <literal>pdflatex</literal>)</paragraph></list_item><list_item><paragraph>HTML (format <literal>html</literal>)</paragraph></list_item><list_item><paragraph>reStructuredText (format <literal>rst</literal>)</paragraph></list_item><list_item><paragraph>plain (untagged) ASCII (format <literal>plain</literal>)</paragraph></list_item><list_item><paragraph>Sphinx (format <literal>sphinx</literal>)</paragraph></list_item><list_item><paragraph>(Pandoc extended) Markdown (format <literal>pandoc</literal>)</paragraph></list_item><list_item><paragraph>Googlecode wiki (format <literal>gwiki</literal>)</paragraph></list_item><list_item><paragraph>MediaWiki for Wikipedia and Wikibooks (format <literal>mwiki</literal>)</paragraph></list_item><list_item><paragraph>Creoloe wiki (format <literal>cwiki</literal>)</paragraph></list_item><list_item><paragraph>Epydoc (format <literal>epydoc</literal>)</paragraph></list_item><list_item><paragraph>StructuredText (format <literal>st</literal>)</paragraph></list_item></bullet_list></block_quote><paragraph>The best supported formats are <literal>latex</literal>, <literal>sphinx</literal>, <literal>html</literal>, and <literal>plain</literal>.</paragraph></section><section ids="title-authors-and-date" names="title,\ authors,\ and\ date"><title refid="id2">Title, Authors, and Date</title><paragraph>A typical example of giving a title, a set of authors, a date,
and an optional table of contents
reads:</paragraph><literal_block xml:space="preserve">TITLE: On an Ultimate Markup Language
AUTHOR: H. P. Langtangen at Center for Biomedical Computing, Simula Research Laboratory and Dept. of Informatics, Univ. of Oslo
AUTHOR: Kaare Dump Email: dump@cyb.space.com at Segfault, Cyberspace Inc.
AUTHOR: A. Dummy Author
DATE: today
TOC: on</literal_block><paragraph>The entire title must appear on a single line.
The author syntax is:</paragraph><literal_block xml:space="preserve">name Email: somename@adr.net at institution1 and institution2</literal_block><paragraph>where the email is optional, the &quot;at&quot; keyword is required if one or
more institutions are to be specified, and the &quot;and&quot; keyword
separates the institutions. Each author specification must appear
on a single line.
When more than one author belong to the
same institution, make sure that the institution is specified in an identical
way for each author.</paragraph><paragraph>The date can be set as any text different from <literal>today</literal> if not the
current date is wanted, e.g., <literal>Feb 22, 2016</literal>.</paragraph><paragraph>The table of contents is removed by writing <literal>TOC: off</literal>.</paragraph><target refid="quick-sections"/></section><section ids="section-types quick-sections" names="section\ types quick:sections"><title refid="id3">Section Types</title><table><tgroup cols="2"><colspec colwidth="40"/><colspec colwidth="40"/><thead><row><entry><paragraph>Section type</paragraph></entry><entry><paragraph>Syntax</paragraph></entry></row></thead><tbody><row><entry><paragraph>chapter</paragraph></entry><entry><paragraph><literal>========= Heading ========</literal> (9 <literal>=</literal>)</paragraph></entry></row><row><entry><paragraph>section</paragraph></entry><entry><paragraph><literal>======= Heading =======</literal>    (7 <literal>=</literal>)</paragraph></entry></row><row><entry><paragraph>subsection</paragraph></entry><entry><paragraph><literal>===== Heading =====</literal>        (5 <literal>=</literal>)</paragraph></entry></row><row><entry><paragraph>subsubsection</paragraph></entry><entry><paragraph><literal>=== Heading ===</literal>            (3 <literal>=</literal>)</paragraph></entry></row><row><entry><paragraph>paragraph</paragraph></entry><entry><paragraph><literal>__Heading.__</literal>               (2 <literal>_</literal>)</paragraph></entry></row><row><entry><paragraph>abstract</paragraph></entry><entry><paragraph><literal>__Abstract.__</literal> Running text...</paragraph></entry></row></tbody></tgroup></table><paragraph>Note that abstracts are recognized by starting with <literal>__Abstract.__</literal> at
the beginning of a line and ending with three or more <literal>=</literal> signs of the
next heading.</paragraph><paragraph>Appendix is supported: just let the heading start with &quot;Appendix: &quot;
(this affects only <literal>latex</literal> output, where the appendix formatting
is used - all other formats just leave the heading as it is written).</paragraph></section><section ids="inline-formatting" names="inline\ formatting"><title refid="id4">Inline Formatting</title><paragraph>Words surrounded by <literal>*</literal> are emphasized: <literal>*emphasized words*</literal> becomes
<emphasis>emphasized words</emphasis>. Similarly, an underscore surrounds words that
appear in boldface: <literal>_boldface_</literal> become <strong>boldface</strong>.</paragraph></section><section ids="lists" names="lists"><title refid="id5">Lists</title><paragraph>There are three types of lists: <emphasis>bullet lists</emphasis>, where each item starts
with <literal>*</literal>, <emphasis>enumeration lists</emphasis>, where each item starts with <literal>o</literal> and gets
consqutive numbers,
and <emphasis>description</emphasis> lists, where each item starts with <literal>-</literal> followed
by a keyword and a colon:</paragraph><literal_block xml:space="preserve">Here is a bullet list:

 * item1
 * item2
  * subitem1 of item2
  * subitem2 of item2
 * item3

Note that sublists are consistently indented by one or more blanks..
Here is an enumeration list:

 o item1
 o item2
   may appear on
   multiple lines
  o subitem1 of item2
  o subitem2 of item2
 o item3

And finally a description list:

 - keyword1: followed by
   some text
   over multiple
   lines
 - keyword2:
   followed by text on the next line
 - keyword3: and its description may fit on one line</literal_block><paragraph>The code above follows.</paragraph><paragraph>Here is a bullet list:</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>item1</paragraph></list_item><list_item><paragraph>item2</paragraph></list_item></bullet_list><block_quote><bullet_list bullet="*"><list_item><paragraph>subitem1 of item2</paragraph></list_item><list_item><paragraph>subitem2 of item2</paragraph></list_item></bullet_list></block_quote><bullet_list bullet="*"><list_item><paragraph>item3</paragraph></list_item></bullet_list></block_quote><paragraph>Note that sublists are indented.
Here is an enumeration list:</paragraph><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>item1</paragraph></list_item><list_item><paragraph>item2
may appear on
multiple lines</paragraph></list_item></enumerated_list><block_quote><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>subitem1 of item2</paragraph></list_item><list_item><paragraph>subitem2 of item2</paragraph></list_item></enumerated_list></block_quote><enumerated_list enumtype="arabic" prefix="" start="3" suffix="."><list_item><paragraph>item3</paragraph></list_item></enumerated_list><paragraph>And finally a description list:</paragraph><block_quote><definition_list><definition_list_item><term>keyword1:</term><definition><paragraph>followed by
some text
over multiple
lines</paragraph></definition></definition_list_item><definition_list_item><term>keyword2:</term><definition><paragraph>followed by text on the next line</paragraph></definition></definition_list_item><definition_list_item><term>keyword3:</term><definition><paragraph>and its description may fit on one line</paragraph></definition></definition_list_item></definition_list></block_quote></section><section ids="comments" names="comments"><title refid="id6">Comments</title><paragraph>Lines starting with <literal>#</literal> are treated as comments in the document and
translated to the proper syntax for comments in the output
document. Such comment lines should not appear before LaTeX math
blocks, verbatim code blocks, or lists if the formats <literal>rst</literal> and
<literal>sphinx</literal> are desired.</paragraph><paragraph>When using the Mako preprocessor one can also place comments in
the Doconce source file that will be removed by Mako before
Doconce starts processing the file. Mako comments are recognized
by lines starting with two hashes <literal>##</literal> or by blocks of text
inside the comment directives <literal>%&lt;doc&gt;</literal> (beginning) and <literal>&lt;%doc/&gt;</literal> (end).</paragraph><paragraph>Inline comments, in the text, that are meant as messages or notes to readers
(authors in particular)
are often useful and enabled by the syntax:</paragraph><literal_block xml:space="preserve">[name: running text]</literal_block><paragraph>where <literal>name</literal> is the name or ID of an author or reader making the comment,
and <literal>running text</literal> is the comment. There must be a space after the colon.
Running:</paragraph><literal_block xml:space="preserve">doconce format html mydoc.do.txt --skip_inline_comments</literal_block><paragraph>removes all such inline comments from the output. This feature makes it easy
to turn on and off notes to readers and is frequently used while writing
a document.</paragraph><paragraph>All inline comments to readers can also be physically
removed from the Doconce source if desired:</paragraph><literal_block xml:space="preserve">doconce remove_inline_comments mydoc.do.txt</literal_block><paragraph>This action is appropriate when all issues with such comments are resolved.</paragraph></section><section ids="verbatim-computer-code" names="verbatim/computer\ code"><title refid="id7">Verbatim/Computer Code</title><paragraph>Inline verbatim code is typeset within back-ticks, as in:</paragraph><literal_block xml:space="preserve">Some sentence with `words in verbatim style`.</literal_block><paragraph>resulting in Some sentence with <literal>words in verbatim style</literal>.</paragraph><paragraph>Multi-line blocks of verbatim text, typically computer code, is typeset
in between <literal>!bc xxx</literal> and <literal>!ec</literal> directives (which must appear on the
beginning of the line). A specification <literal>xxx</literal> indicates what verbatim
formatting style that is to be used. Typical values for <literal>xxx</literal> are
nothing, <literal>cod</literal> for a code snippet, <literal>pro</literal> for a complete program,
<literal>sys</literal> for a terminal session, <literal>dat</literal> for a data file (or output from a
program),
<literal>Xpro</literal> or <literal>Xcod</literal> for a program or code snipped, respectively,
in programming <literal>X</literal>, where <literal>X</literal> may be <literal>py</literal> for Python,
<literal>cy</literal> for Cython, <literal>sh</literal> for Bash or other Unix shells,
<literal>f</literal> for Fortran, <literal>c</literal> for C, <literal>cpp</literal> for C++, <literal>m</literal> for MATLAB,
<literal>pl</literal> for Perl. For output in <literal>latex</literal> one can let <literal>xxx</literal> reflect any
defined verbatim environment in the <literal>ptex2tex</literal> configuration file
(<literal>.ptex2tex.cfg</literal>). For <literal>sphinx</literal> output one can insert a comment:</paragraph><literal_block xml:space="preserve"># sphinx code-blocks: pycod=python cod=fortran cppcod=c++ sys=console</literal_block><paragraph>that maps environments (<literal>xxx</literal>) onto valid language types for
Pygments (which is what <literal>sphinx</literal> applies to typeset computer code).</paragraph><paragraph>The <literal>xxx</literal> specifier has only effect for <literal>latex</literal> and
<literal>sphinx</literal> output. All other formats use a fixed monospace font for all
kinds of verbatim output.</paragraph><comment xml:space="preserve">When showing copy from file in !bc envir, intent a character - otherwise</comment><comment xml:space="preserve">ptex2tex is confused and starts copying...</comment><paragraph>Computer code can also be copied from a file:</paragraph><literal_block xml:space="preserve">@@@CODE doconce_program.sh
@@@CODE doconce_program.sh  fromto: doconce clean@^doconce split_rst
@@@CODE doconce_program.sh  from-to: doconce clean@^doconce split_rst</literal_block><paragraph>The <literal>@@@CODE</literal> identifier must appear at the very beginning of the line.
The first specification copies the complete file <literal>doconce_program.sh</literal>.
The second specification copies from the first line matching the <emphasis>regular
expression</emphasis> <literal>doconce clean</literal> up to, but not including the line
matching the <emphasis>regular expression</emphasis> <literal>^doconce split_rst</literal>.
The third specification behaves as the second, but the line matching
the first regular expression is not copied (aimed at copying
text between begin-end comment pair in the file).</paragraph><paragraph>The copied line from file are in this example put inside <literal>!bc shpro</literal>
and <literal>!ec</literal> directives, if a complete file is copied, while the
directives become <literal>!bc shcod</literal> and <literal>!ec</literal> when a code snippet is copied
from file. In general, for a filename extension <literal>.X</literal>, the environment
becomes <literal>!bc Xpro</literal> or <literal>!bc Xcod</literal> for a complete program or snippet,
respectively. The enivorments (<literal>Xcod</literal> and <literal>Xpro</literal>) are only active
for <literal>latex</literal> and <literal>sphinx</literal> outout.</paragraph><paragraph>Important warnings:</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>A code block must come after some plain sentence (at least for successful
output in reStructredText), not directly after a section/paragraph heading,
table, comment, figure, or movie.</paragraph></list_item><list_item><paragraph>Verbatim code blocks inside lists can be ugly typeset in some
output formats. A more robust approach is to replace the list by
paragraphs with headings.</paragraph></list_item></bullet_list></block_quote></section><section ids="latex-mathematics" names="latex\ mathematics"><title refid="id8">LaTeX Mathematics</title><paragraph>Doconce supports inline mathematics and blocks of mathematics, using
standard LaTeX syntax. The output formats <literal>sphinx</literal>, <literal>latex</literal>, and <literal>pdflatex</literal>
work with this syntax while all other formats will just display the
raw LaTeX code.</paragraph><paragraph>Inline expressions are written in the standard
LaTeX way with the mathematics surrounded by dollar signs, as in
Ax=b. To help increase readability in other formats than <literal>sphinx</literal>,
<literal>latex</literal>, and <literal>pdflatex</literal>, inline mathematics may have a more human
readable companion expression. The syntax is like:</paragraph><literal_block xml:space="preserve">$\sin(\norm{\bf u})$|$sin(||u||)$</literal_block><paragraph>That is, the LaTeX expression appears to the left of a vertical bar (pipe
symbol) and the more readable expression appears to the right. Both
expressions are surrounded by dollar signs. Plain text formats and HTML
will applied the expression to the right.</paragraph><paragraph>Blocks of LaTeX mathematics are written within
<literal>!bt</literal>
and
<literal>!et</literal> (&quot;begin/end TeX&quot;) directives.
For example:</paragraph><literal_block xml:space="preserve">!bt
\begin{align*}
\nabla\cdot u &amp;= 0,\\
\nabla\times u &amp; 0.
\end{align*}</literal_block><paragraph>will appear as:</paragraph><literal_block xml:space="preserve">\begin{align*}
\nabla\cdot u &amp;= 0,\\
\nabla\times u &amp; 0.
\end{align*}</literal_block><paragraph>One can use <literal>#if FORMAT in (&quot;latex&quot;, &quot;pdflatex&quot;, &quot;sphinx&quot;, &quot;mwiki&quot;)</literal> to let
the preprocessor choose a block of mathematics in LaTeX format
or (<literal>#else</literal>) a modified form more suited for plain text and wiki
formats without support for mathematics.</paragraph><paragraph>Any LaTeX syntax is accepted, but if output in the <literal>sphinx</literal>, <literal>pandoc</literal>,
or <literal>html</literal> formats
is important, one must know that these formats does not support many
LaTeX constructs. For output both in <literal>latex</literal> and the mentioned formats
the following rules are recommended:</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>Use only the equation environments <literal>\[</literal>, <literal>\]</literal>,
<literal>equation</literal>, <literal>equation*</literal>, <literal>align</literal>, and <literal>align*</literal>.</paragraph></list_item><list_item><paragraph>Labels in multiple equation environments such as <literal>align</literal> are
not (yet) handled by <literal>sphinx</literal> and <literal>pandoc</literal>, so avoid inserting
labels and referring  to equation labels in <literal>align</literal> environments.
Actually, <literal>align*</literal> is the preferred environment for multiple equations.</paragraph></list_item><list_item><paragraph>LaTeX supports lots of fancy formatting, for example, multiple
plots in the same figure, footnotes, margin notes, etc.
Allowing other output formats, such as <literal>sphinx</literal>, makes it necessary
to only utilze very standard LaTeX and avoid, for instance, more than
one plot per figure. However, one can use preprocessor if-tests on
the format (typically <literal># #if FORMAT in (&quot;latex&quot;, &quot;pdflatex&quot;)</literal>) to
include special code for <literal>latex</literal> and <literal>pdflatex</literal> output and more
straightforward typesetting for other formats. In this way, one can
also allow advanced LaTeX features and fine tuning of resulting
PDF document.</paragraph></list_item></bullet_list></block_quote><paragraph><emphasis>LaTeX Newcommands.</emphasis> Text missing...</paragraph></section><section ids="figures-and-movies" names="figures\ and\ movies"><title refid="id9">Figures and Movies</title><paragraph>Figures and movies have almost equal syntax:</paragraph><literal_block xml:space="preserve">FIGURE: [relative/path/to/figurefile, width=500] Here goes the caption which must be on a single line. label{some:fig:label}

MOVIE: [relative/path/to/moviefile, width=500] Here goes the caption which must be on a single line. label{some:fig:label}</literal_block><paragraph>Note the mandatory comma after the figure/movie file.</paragraph><paragraph>The figure file can be listed without extension. Doconce will then find
the version of the file with the most appropriate extension for the chosen
output format. If not suitable version is found, Doconce will convert
another format to the desired one.</paragraph><paragraph>Movie files can either be a video or a wildcard expression for a
series of frames. In the latter case, a simple device in an HTML page
will display the individual frame files as a movie.</paragraph><paragraph>Combining several image files into one can be done by the
<literal>convert</literal> and <literal>montage</literal> programs from the ImageMagick suite:</paragraph><literal_block xml:space="preserve">montage file1.png file2.png ... file4.png -geometry +2+2  result.png
montage file1.png file2.png -tile x1 result.png
montage file1.png file2.png -tile 1x result.png

convert -background white file1.png file2.png +append tmp.png</literal_block><paragraph>Use <literal>+append</literal> for stacking left to right, <literal>-append</literal> for top to bottom.
The positioning of the figures can be controlled by <literal>-gravity</literal>.</paragraph></section><section ids="tables" names="tables"><title refid="id10">Tables</title><paragraph>The table in the section <reference name="Section Types" refid="section-types">Section Types</reference> was written with this
syntax:</paragraph><literal_block xml:space="preserve">|----------------c--------|------------------c--------------------|
|      Section type       |        Syntax                         |
|----------------l--------|------------------l--------------------|
| chapter                 | `========= Heading ========` (9 `=`)  |
| section                 | `======= Heading =======`    (7 `=`)  |
| subsection              | `===== Heading =====`        (5 `=`)  |
| subsubsection           | `=== Heading ===`            (3 `=`)  |
| paragraph               | `__Heading.__`               (2 `_`)  |
|-----------------------------------------------------------------|</literal_block><paragraph>Note that</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>Each line begins and ends with a vertical bar (pipe symbol).</paragraph></list_item><list_item><paragraph>Column data are separated by a vertical bar (pipe symbol).</paragraph></list_item><list_item><paragraph>There may be horizontal rules, i.e., lines with dashes for
indicating the heading and the end of the table, and these may
contain characters 'c', 'l', or 'r' for how to align headings or
columns. The first horizontal rule may indicate how to align
headings (center, left, right), and the horizontal rule after the
heading line may indicate how to align the data in the columns
(center, left, right).</paragraph></list_item><list_item><paragraph>If the horizontal rules are without alignment information there should
be no vertical bar (pipe symbol) between the columns. Otherwise, such
a bar indicates a vertical bar between columns in LaTeX.</paragraph></list_item><list_item><paragraph>Many output formats are so primitive that heading and column alignment
have no effect.</paragraph></list_item></bullet_list></block_quote></section><section ids="labels-references-citations-and-index" names="labels,\ references,\ citations,\ and\ index"><title refid="id11">Labels, References, Citations, and Index</title><paragraph>The notion of labels, references, citations, and an index is adopted
from LaTeX with a very similar syntax. As in LaTeX, a label can be
inserted anywhere, using the syntax:</paragraph><literal_block xml:space="preserve">label{name}</literal_block><paragraph>with no backslash
preceding the label keyword! It is common practice to choose <literal>name</literal>
as some hierarchical name, say <literal>a:b:c</literal>, where <literal>a</literal> and <literal>b</literal> indicate
some abbreviations for a section and/or subsection for the topic and
<literal>c</literal> is some name for the particular unit that has a label.</paragraph><paragraph>A reference to the label <literal>name</literal> is written as:</paragraph><literal_block xml:space="preserve">ref{name}</literal_block><paragraph>again with no backslash before <literal>ref</literal>.</paragraph><paragraph>Single citations are written as:</paragraph><literal_block xml:space="preserve">cite{name}</literal_block><paragraph>where <literal>name</literal> is a logical name
of the reference (again, LaTeX writers must not insert a backslash).
Bibliography citations often have <literal>name</literal> on the form
<literal>Author1_Author2_YYYY</literal>, <literal>Author_YYYY</literal>, or <literal>Author1_etal_YYYY</literal>, where
<literal>YYYY</literal> is the year of the publication.
Multiple citations at once is possible by separating the logical names
by comma:</paragraph><literal_block xml:space="preserve">cite{name1,name2,name3}</literal_block><paragraph>The bibliography is specified by a line <literal>BIBFILE: name_bib.bib,
name_bib.rst, name_bib.py</literal>, where <literal>name</literal> is the logical name of the
document (the doconce file will then normally have the name
<literal>name.do.txt</literal>), and the various files reflect different formattings of
the bibliography: '.bib' indicates a BibTeX file, '.rst' a reST-style
bibliography, and '.py' a Python list of dictionaries for specifying
the entries in the bibliography. The bibliography (as read from file)
is inserted where the <literal>BIBFILE</literal> keyword appears.</paragraph><paragraph>There is a <emphasis>generalized referencing</emphasis> feature in Doconce that allows
a reference with <literal>ref</literal> to have one formulation if the label is
in the same document and another formulation if the reference is
to an item in an external document. The syntax of a generalized
reference is:</paragraph><literal_block xml:space="preserve">ref[internal][cite][external]

# Example:
As explained in
ref[Section ref{subsec:ex}][in cite{testdoc:12}][a &quot;section&quot;:
&quot;testdoc.html#___sec2&quot; in the document
&quot;A Document for Testing Doconce&quot;: &quot;testdoc.html&quot; cite{testdoc:12}],
Doconce documents may include movies.</literal_block><paragraph>The output from a generalized reference is the text <literal>internal</literal> if all
<literal>label`_` references in ``internal</literal> are references to labels in the
present document. Otherwise, if cite is non-empty and the format is
<literal>latex</literal> or <literal>pdflatex</literal> one assumes that the references in <literal>internal</literal>
are to external documents declared by a comment line <literal>#
Externaldocuments: testdoc, mydoc</literal> (usually after the title, authors,
and date). In this case the output text is <literal>internal cite</literal> and the
LaTeX package <literal>xr</literal> is used to handle the labels in the external
documents.  If none of the two situations above applies, the
<literal>external</literal> text will be the output.</paragraph><paragraph>Doconce supports creating an index of keywords. A certain keyword
is registered for the index by a syntax like (no
backslash!):</paragraph><literal_block xml:space="preserve">index{name}</literal_block><paragraph>It is recommended to place any index of this type outside
running text, i.e., after (sub)section titles and in the space between
paragraphs. Index specifications placed right before paragraphs also
gives the doconce source code an indication of the content in the
forthcoming text. The index is only produced for the <literal>latex</literal>, <literal>rst</literal>, and
<literal>sphinx</literal> formats.</paragraph></section><section ids="capabilities-of-the-doconce-program" names="capabilities\ of\ the\ &quot;doconce&quot;\ program"><title refid="id12">Capabilities of the &quot;doconce&quot; Program</title><paragraph>The <literal>doconce</literal> program can be used for a number of purposes besides
transforming a <literal>.do.txt</literal> file to some format. Here is the
list of capabilities:</paragraph><literal_block xml:space="preserve">Usage: doconce command [optional arguments]
commands: format insertdocstr old2new_format gwiki_figsubst remove_inline_comments latin2html sphinx_dir subst replace replace_from_file clean help latex_header latex_footer guess_encoding change_encoding bbl2rst split_rst split_html slides_html html_colorbullets list_labels teamod sphinxfix_localURLs make_figure_code_links grab remove remove_exercise_answers spellcheck ptex2tex expand_commands combine_images latex_exercise_toc


# transform doconce file to another format
doconce format html|latex|pdflatex|rst|sphinx|plain|gwiki|mwiki|cwiki|pandoc|st|epytext file.do.txt

# substitute a phrase by another using regular expressions
doconce subst [-s -m -x --restore] regex-pattern regex-replacement file1 file2 ...
(-s is the re.DOTALL modifier, -m is the re.MULTILINE modifier,
 -x is the re.VERBOSE modifier, --restore copies backup files back again)

# replace a phrase by another literally
doconce replace from-text to-text file1 file2 ...
(exact text substutition)

# doconce replace using from and to phrases from file
doconce replace_from_file file-with-from-to file1 file2 ...
(exact text substitution, but a set of from-to relations)

# gwiki format requires substitution of figure file names by URLs
doconce gwiki_figsubst file.gwiki URL-of-fig-dir

# remove all inline comments in a doconce file
doconce remove_inline_comments file.do.txt

# create a directory for the sphinx format
doconce sphinx_dir author='Me and you' title='Quick title' \
    version=0.1 dirname=sphinx-rootdir theme=default \
    file1 file2 file3
(requires sphinx version &gt;= 1.1)

# replace latex-1 (non-ascii) characters by html codes
doconce latin2html file.html

# walk through a directory tree and insert doconce files as
# docstrings in *.p.py files
doconce insertdocstr rootdir

# remove all files that the doconce format can regenerate
doconce clean

# print the header (preamble) for latex file
doconce latex_header

# print the footer for latex files
doconce latex_footer

# change encoding
doconce change_encoding utf-8 latin1 filename

# guess the encoding in a text
doconce guess_encoding filename

# transform a .bbl file to a .rst file with reST bibliography format
doconce bbl2rst file.bbl

# split a sphinx/rst file into parts
doconce split_rst complete_file.rst

# edit URLs to local files and place them in _static
doconce sphinxfix_local_URLs file.rst

# split an html file into parts according to !split commands
doconce split_html complete_file.html

# create slides from a (doconce) html file
doconce slides_html slide_type complete_file.html

# replace bullets in lists by colored bullets
doconce html_colorbullets file1.html file2.html ...

# grab selected text from a file
doconce grab   --from[-] from-text [--to[-] to-text] somefile

# remove selected text from a file
doconce remove --from[-] from-text [--to[-] to-text] somefile

# remove answers to exercises
doconce remove_exercise_answers file_in_some_format

# run spellcheck on a set of files
doconce spellcheck [-d .mydict.txt] *.do.txt

# transform ptex2tex files (.p.tex) to ordinary latex file
# and manage the code environments
doconce ptex2tex mydoc -DMINTED pycod=minted sys=Verbatim \
        dat=\begin{quote}\begin{verbatim};\end{verbatim}\end{quote}

# expand short cut commands to full form in files
doconce expand_commands file1 file2 ...

# combine several images into one
doconce combine_images image1 image2 ... output_file

# insert a table of exercises in a latex file myfile.p.tex
doconce latex_exercise_toc myfile

# list all labels in a document (for purposes of cleaning them up)
doconce list_labels myfile</literal_block></section><section ids="exercises" names="exercises"><title refid="id13">Exercises</title><paragraph>Doconce supports <emphasis>Exercise</emphasis>, <emphasis>Problem</emphasis>, and <emphasis>Project</emphasis>. These are typeset
as ordinary sections and referred to by their section labels.
An exercise, problem, or project sections contains certain <emphasis>elements</emphasis>:</paragraph><block_quote><bullet_list bullet="*"><list_item><paragraph>a headline at the level of a subsection or subsubsection,
containing one of the words &quot;Exercise:&quot;, &quot;Problem:&quot;, or
&quot;Project:&quot;, followed by a title (required)</paragraph></list_item><list_item><paragraph>a label (optional)</paragraph></list_item><list_item><paragraph>a solution file (optional)</paragraph></list_item><list_item><paragraph>name of file with a student solution (optional)</paragraph></list_item><list_item><paragraph>main exercise text (required)</paragraph></list_item><list_item><paragraph>a short answer (optional)</paragraph></list_item><list_item><paragraph>a full solution (optional)</paragraph></list_item><list_item><paragraph>one or more hints (optional)</paragraph></list_item><list_item><paragraph>one or more subexercises (subproblems, subprojects), which can also
contain a text, a short answer, a full solution, name student file
to be handed in, and one or more hints (optional)</paragraph></list_item></bullet_list></block_quote><paragraph>A typical sketch of a a problem without subexercises goes as follows:</paragraph><literal_block xml:space="preserve">===== Problem: Derive the Formula for the Area of an Ellipse =====
label{problem:ellipsearea1}
file=ellipse_area.pdf
solution=ellipse_area1_sol.pdf

Derive an expression for the area of an ellipse by integrating
the area under a curve that defines half of the allipse.
Show each step in the mathematical derivation.

!bhint
Wikipedia has the formula for the curve.
!ehint

!bhint
&quot;Wolframalpha&quot;: &quot;http://wolframalpha.com&quot; can perhaps
compute the integral.
!ehint</literal_block><paragraph>An exercise with subproblems, answers and full solutions has this
setup-up:</paragraph><literal_block xml:space="preserve">===== Exercise: Determine the Distance to the Moon =====
label{exer:moondist}

Intro to this exercise. Questions are in subexercises below.

!bsubex
Subexercises are numbered a), b), etc.

file=subexer_a.pdf

!bans
Short answer to subexercise a).
!eans

!bhint
First hint to subexercise a).
!ehint

!bhint
Second hint to subexercise a).
!ehint
!esubex

!bsubex
Here goes the text for subexercise b).

file=subexer_b.pdf

!bhint
A hint for this subexercise.
!ehint

!bsol
Here goes the solution of this subexercise.
!esol
!esubex

!bremarks
At the very end of the exercise it may be appropriate to summarize
and give some perspectives. The text inside the !bremarks-!eremarks
directives is always typeset at the end of the exercise.
!eremarks

!bsol
Here goes a full solution of the whole exercise.
!esol</literal_block><paragraph>By default, answers, solutions, and hints are typeset as paragraphs.</paragraph></section><section ids="labels-index-and-citations" names="labels,\ index,\ and\ citations"><title refid="id14">Labels, Index, and Citations</title></section><section ids="preprocessing" names="preprocessing"><title refid="id15">Preprocessing</title><paragraph>Doconce documents may utilize a preprocessor, either <literal>preprocess</literal> and/or
<literal>mako</literal>. The former is a C-style preprocessor that allows if-tests
and including other files (but not macros with arguments).
The <literal>mako</literal> preprocessor is much more advanced - it is actually a full
programming language, very similar to Python.</paragraph><paragraph>The command <literal>doconce format</literal> first runs <literal>preprocess</literal> and then <literal>mako</literal>.
Here is a typical example on utilizing <literal>preprocess</literal> to include another
document, &quot;comment out&quot; a large portion of text, and to write format-specific
constructions:</paragraph><literal_block xml:space="preserve"># #include &quot;myotherdoc.do.txt&quot;

# #if FORMAT in (&quot;latex&quot;, &quot;pdflatex&quot;)
\begin{table}
\caption{Some words... label{mytab}}
\begin{tabular}{lrr}
\hline\noalign{\smallskip}
\multicolumn{1}{c}{time} &amp; \multicolumn{1}{c}{velocity} &amp; \multicolumn{1}{c}{acceleration} \\
\hline
0.0          &amp; 1.4186       &amp; -5.01        \\
2.0          &amp; 1.376512     &amp; 11.919       \\
4.0          &amp; 1.1E+1       &amp; 14.717624    \\
\hline
\end{tabular}
\end{table}
# #else
  |--------------------------------|
  |time  | velocity | acceleration |
  |--l--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|
# #endif

# #ifdef EXTRA_MATERIAL
....large portions of text...
# #endif</literal_block><paragraph>With the <literal>mako</literal> preprocessor the if-else tests have slightly different syntax.
An <reference name="example document" refuri="http://hplgit.github.com/bioinf-py/">example document</reference><target ids="example-document" names="example\ document" refuri="http://hplgit.github.com/bioinf-py/"/> contains
some illustrations on how to utilize <literal>mako</literal> (clone the GitHub project and
examine the Doconce source and the <literal>doc/src/make.sh</literal> script).</paragraph></section><section ids="resources" names="resources"><title refid="id16">Resources</title><block_quote><bullet_list bullet="*"><list_item><paragraph>Excellent &quot;Sphinx Tutorial&quot; by C. Reller: &quot;<reference refuri="http://people.ee.ethz.ch/~creller/web/tricks/reST.html">http://people.ee.ethz.ch/~creller/web/tricks/reST.html</reference>&quot;</paragraph></list_item></bullet_list></block_quote></section></document>