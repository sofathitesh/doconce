<%doc>
This is Mako comment block
to test the use of Mako as preprocessor.
</%doc>

TITLE: A Document for Testing Doconce
AUTHOR: Hans Petter Langtangen Email: hpl@simula.no at Center for Biomedical Computing, Simula Research Laboratory and Department of Informatics, University of Oslo
AUTHOR: Kaare Dump at Segfault Inc, Cyberspace
AUTHOR: A. Dummy Author
AUTHOR: I. S. Overworked at Inst1 and Inst2, Somewhere and Third Inst, Elsewhere and Fourth Inst
AUTHOR: J. Doe mail: j_doe@cyberspace.com
DATE: today

TOC: on

!split

The format of this document is
% if FORMAT == 'html':
plain, homemade HTML (from Doconce).
  % elif FORMAT == 'latex':
plain, homemade LaTeX (from Doconce).
  % elif FORMAT == 'pdflatex':
plain, homemade pdfLaTeX (from Doconce).
  %else:
${FORMAT}
% endif

% if SOMEVAR:
# Just a comment
% endif

__Abstract.__
This is a document with many test constructions for doconce syntax.
It was used heavily for the development and kept for testing
numerous constructions, also special and less common cases.

And exactly for test purposes we have an extra line here, which
is part of the abstract.

# Cannot demonstrate chapter headings since abstract and chapter
# is mutually exclusive in LaTeX

======= Section 1 =======
label{sec1}

Here is a nested list:

  * item1
  * item2
  * item3 which continues
    on the next line to test that feature
  * and a sublist
    * with indented subitem1
    * and a subitem2
  * and perhaps an ordered sublist
    o first item
    o second item,
      continuing on a new line

!bquote
Here are two lines that make up
a block quote.
!equote

!split and check if these extra words are included properly in the comment

===== Subsection 1 =====

More text, with a reference back to Section ref{sec1} and further
to Section ref{subsubsec:ex}. idx{`somefunc` function}

# sphinx code-blocks: pycod=python cod=fortran cppcod=c++ sys=console

Let's do some copying from files too. First from subroutine up to the very end,

@@@CODE ../doc/manual/__testcode.f fromto: subroutine@
and then just the subroutine,
@@@CODE ../doc/manual/__testcode.f from-to:a comment@^C\s+END1
and finally the complete file:
@@@CODE ../doc/manual/__testcode.f

Testing other code environments. First Python:
!bc
|bc pycod
def f(x):
    return x+1
|ec
!ec
which gets rendered as

!bc pycod
def f(x):
    return x+1
!ec

Now a complete program to be shown via Python Online Tutorial:
!bc pyoptpro
def f(x):
    return x + 1

a = 2
x = a
a = 1
v = f(x)
print v
!ec

Then Cython:
!bc cycod
cpdef f(double x):
    return x + 1
!ec

# This one tests a + sign before a code environment
C++:
!bc cpppro
#include <iostream>

int main()
{
   std::cout << "Sample output" << std::endl;
   return 0
}
!ec
# The next should get correctly typset in sphinx (cod is fcod)
And a little bit of Fortran:

!bc
|bc cod
      subroutine midpt(x, length, a, b)
      real*8 a, b, x
      x = (a + b)/2
      length = b - a
      return
      end
|ec
!ec
which then is typeset as

!bc cod
      subroutine midpt(x, length, a, b)
      real*8 a, b, x
      x = (a + b)/2
      length = b - a
      return
      end
!ec


System call:
!bc sys
Terminal> mkdir test
Terminal> cd test
Terminal> myprog -f
output1
output2
!ec

It is time to test `verbatim inline font` especially with `a newline
inside the text` and an exclamation mark at the end: `BEGIN`! The
exclamation mark inside the verbatim text is not smart for latex as
we use ! in the `verb` typesetting... Also test backslashes
like `\begin` and `\end` in inline verbatim text.

===== Subsection 2 =====
label{subsec:ex}
idx{figures}

Test of figures. In particular we refer to Figure ref{fig:impact} in which
there is a flow.

FIGURE:[../doc/manual/figs/streamtubes, width=200] Visualization of flow by streamtubes. label{fig:impact}

Figures without captions are allowed.

FIGURE:[../doc/manual/figs/streamtubes, width=200]

idx{movies}
Test of movies.

MOVIE: [../doc/manual/figs/mjolnir.mpeg, width=700 height=400] Mjolnir tsunami (by Sylfest Glimsdal).

# Test empty caption:

MOVIE: [../doc/manual/figs/wavepacket.mpeg, width=700 height=400]

# Test wrong syntax and multi-line caption

   MOVIE: [../doc/manual/figs/wavepacket_*.png, width=700 height=400] Movie
based on collection of frames
(here just a few frames compared with the full wavepacket.mpeg movie).
label{mymov}

# Check out the correct with and height of YouTube movies from the
# embed command that the YouTube page can generate. Similar for Vimeo.

MOVIE: [http://www.youtube.com/watch?v=_O7iUiftbKU, width=420 height=315] Movies can be uploaded to YouTube and embedded as HTML or as a link.

MOVIE: [http://vimeo.com/55562330, width=500 height=278] Computational fluid dynamics movie.


# Test multi-line caption in figure

Here is figure ref{myfig} with a long multi-line caption
and an extra space before the FIGURE keyword.

 FIGURE: [../doc/manual/figs/wavepacket_0001.png, width=500] A long
caption spanning
several lines and containing verbatim words like `my_file_v1` and `my_file_v2`
as well as math with subscript as in $t_{i+1}$. label{myfig}

Movie ref{mymov} has a similar problem.

# Must be a blank line after MOVIE or FIGURE to detect this problem

# Test URL as figure name

FIGURE: [https://doconce.googlecode.com/hg/doc/blog/f_plot.png, width=500, frac=0.8]

# Test wikimedia type of files that otherwise reside in subdirs
# #if FORMAT == "mwiki"
FIGURE: [testfigs/df_plot.png, width=800] This is a wikimedia figure file.

# Non-uploaded file with no caption
FIGURE: [testfigs/df2s8765s_plot.png, width=200, frac=0.4]
# #endif

# Somewhat challenging heading with latex math, \t, \n, ? and parenthesis

===== The $\theta$ parameter (not $\nabla$?) =====
label{decay:sec:theta}

Functions do not always need to be advanced, here is one
involving $\theta$:
!bc
def f(theta):
    return theta**2
!ec

__More on $\theta$.__ Here is more text following headline with math.

Newcommands must also be tested in this \report:
$\half$, $\halfi$, $\x$, $\Ddt{u}$,
both inline and in block:

!bt
\begin{align*}
\Ddt{u} &= 0
\\
\half &= \halfi\\
\half\x &= \normalvec
\end{align*}
!et

Or with align with label and numbers:

!bt
\begin{align}
\Ddt{u} &= 0
label{aligneq1}\\
\half &= \halfi\\
\half\x &= \normalvec
label{aligneq2}
\end{align}
!et

% if FORMAT == "sphinx":
Sphinx makes a fix here and splits align into multiple equation
environments.
% endif
% if FORMAT == "mwiki":
The labels above are removed in mwiki since mwiki cannot refer to
labels in equations.
% endif

===== Custom Environments =====

Here is an attempt to create a theorem environment via Mako
(for counting theorems) and comment lines to help replacing lines in
the `.tex` by proper begin-end LaTeX environments for theorems.
Should look nice in most formats!

<%
theorem_counter = 4
%>

# begin theorem
label{theorem:fundamental1}
<%
theorem_counter += 1
theorem_fundamental1 = theorem_counter
%>

__Theorem ${theorem_counter}.__
Let $a=1$ and $b=2$. Then $c=3$.
# end theorem

# begin proof
__Proof.__
Since $c=a+b$, the result follows from straightforward addition.
$\Diamond$|$END$
# end proof

As we see, the proof of Theorem ${theorem_counter} is a modest
achievement.


===== Tables =====
label{subsec:table}

idx{test index with `verbatim text` which is possible}
idx{test `two` (separate) `verbatim expressions` which is also possible}
idx{index with!subindex}

# index with comma could fool sphinx
idx{index, with comma, and one more}

Let us take this table from the manual:

% if FORMAT in ("latex", "pdflatex"):
\begin{table}
\caption{
Testing table environment in LaTeX, enabled by testing on the "latex" format
with the preprocessor.
label{mytab}
}
% endif

  |--------------------------------|
  |time  | velocity | acceleration |
  |--l--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|

% if FORMAT in ("latex", "pdflatex"):
\end{table}
% endif

The Doconce source code reads
!bc ccq
  |--------------------------------|
  |time  | velocity | acceleration |
  |--l--------r-----------r--------|
  | 0.0  | 1.4186   | -5.01        |
  | 2.0  | 1.376512 | 11.919       |
  | 4.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|
!ec

Here is yet another table to test that we can handle more than
one table:

  |--l-------l----------l----------|
  |time  | velocity | acceleration |
  |--l-------l----------l----------|
  | 0.0  | 1.4186   | -5.01        |
  | 1.0  | 1.376512 | 11.919       |
  | 3.0  | 1.1E+1   | 14.717624    |
  |--------------------------------|

And one with math headings (that are expanded and must be treated
accordingly) and verbatim heading and entry:

|-------------------------------|
|$i$ | $h_i$|$\bar T_i$ | `L_i` |
|-l-----r---------r---------r---|
|0   |0     |288        |-0.0065|
|1   |11,000|216        |0.0	|
|2   |20,000|216        |0.001	|
|3   |32,000|228        |0.0028	|
|4   |47,000|270        |0.0	|
|5   |51,000|270        |-0.0028|
|6   |71,000|214        |`NaN`	|
|-------------------------------|

And add one with verbatim headings (with underscores),
and rows starting with `|-` because of a negative number,
and `|` right after verbatim word (with no space):

|-----------------------------------------|
| exact | `v_1`   | $a_i$ + `v_2`|`verb_3_`|
|---r--------r---------r-----------r------|
|9      | 9.62    | 5.57      |  8.98     |
|-20    | -23.39  | -7.65     | -19.93    |
|10     | 17.74   | -4.50     |  9.96     |
|0      | -9.19   | 4.13      | -0.26     |
|-----------------------------------------|


===== A test of verbatim words in heading with subscript $a_i$: `my_file_v1` and `my_file_v2` =====

__Files `my_file_v1.py` and `my_file_v2.py` define some math $a_{i-1}$.__ Here
is
some text.

===== Bibliography test =====

Here is an example: cite{Langtangen_Pedersen_2002} discussed propagation of
large destructive water waves, cite{Langtangen_et_al_2002} gave
an overview of numerical methods for solvin the Navier-Stokes equations,
while the use of Backward Kolmogorov equations for analyzing
random vibrations was investigated in cite{Langtangen_1994a}.
The book chapter cite{Mardal_et_al_2003a} contains information on
C++ software tools for programming multigrid methods. A real retro
reference is cite{Langtangen_1988d} about a big FORTRAN package.
Multiple references are also possible, e.g., see
cite{Langtangen_Pedersen_2002,Mardal_et_al_2003a}.

===== Example: Examples can be typeset as exercises =====
label{Example}

Examples can start with a subsection heading starting with `Example:`
and then, with the command-line option `--examples-as-exercises` be
typeset as exercises. This is useful if one has solution
environments as part of the example.


!bsubex
State some problem.

!bsol
The answer to this subproblem can be written here.
!esol
!esubex

!bsubex
State some other problem.

!bhint
A hint can be given.
!ehint

!bhint
Maybe even another hint?
!ehint

!bsol
The answer to this other subproblem goes here,
maybe over multiple doconce input lines.
!esol
!esubex


===== URLs =====
label{subsubsec:ex}

Testing of URLs: hpl's home page "hpl":"http://folk.uio.no/hpl", or
the entire URL if desired, "URL": "http://folk.uio.no/hpl".  Here is a
plain file link "URL": "testdoc.do.txt", or "url":"testdoc.do.txt", or
URL: "testdoc.do.txt" or url : "testdoc.do.txt" or "a link with
newline": "testdoc.do.txt". Can test spaces with the link with word
too: "hpl": "http://folk.uio.no/hpl" or "hpl" :
"http://folk.uio.no/hpl". Also `file:///` works: "link to a
file":"file:///home/hpl/vc/doconce/doc/demos/manual/manual.html" is
fine to have. Moreover, "loose" URLs work, i.e., no quotes, just
the plain URL as in http://folk.uio.no/hpl, if followed by space, comma,
colon, semi-colon, question mark, exclamation mark, but not a period
(which gets confused with the periods inside the URL).

Here are some tough tests of URLs, especially for the `latex` format:
"Newton-Cotes":
"http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas" formulas
and a "good book":
"http://www.springer.com/mathematics/computational+science+%26+engineering/book/978-3-642-23098-1". Need to test
Newton-Cotes with percentage in URL too:
URL: "http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas"
and URL: "http://en.wikipedia.org/wiki/Newton-Cotes#Open_Newton.E2.80.93Cotes_formulae" which has a shebang.

For the `--latex-printed` it is important to test that URLs with
monofont link text get a footnote, as in this reference to
"`decay_mod`":
"https://github.com/hplgit/INF5620/tree/gh-pages/src/decay/experiments/decay_mod.py".

# Comments should be inserted outside paragraphs (because in the rst
# format extra blanks make a paragraph break).

# Note that when there is no http: or file:, it can be a file link
# if the link name is URL, url, "URL", or "url". Such files should,
# if rst output is desired, but placed in a `_static*` folder.

More tough tests: repeated URLs whose footnotes when using the
`--latex-printed` option must be correct. We have
"google": "http://google.com", "google": "http://google.com", and
"google": "http://google.com", which should result in exactly three
footnotes.


% if FORMAT == "latex":

===== Test of Some LaTeX Fixes =====

Let's check abbr. of some common kind, e.g. the well-known i.e.
expression as an example. Moreover, Dr. Tang and Prof. Monsen,
or maybe also prof. Ting,
will go to the Dept. of Science to test how Mr. Hansen is doing together
with Ms. Larsen. A sentence containing "refines lines" could easily
fool a regex substitution with only i.e. since the dot matches anything.
Also, look at Fig. 4 to see how the data compares with Tab. ref{mytab}.
% endif

===== LaTeX Mathematics =====

Here is an equation without label using backslash-bracket environment:
!bt
\[ a = b + c \]
!et
or with number and label, as in (ref{my:eq1}), using the equation environment:
!bt
\begin{equation}
{\partial u\over\partial t} = \nabla^2 u label{my:eq1}
\end{equation}
!et
We can refer to this equation by (ref{my:eq1}).

Here is a system without equation numbers, using the align-astrisk environment:
!bt
\begin{align*}
\pmb{a} &= \pmb{q}\times\pmb{n} \\
b &= \nabla^2 u + \nabla^4 v
\end{align*}
!et


% if FORMAT in ('latex', 'pdflatex', 'sphinx', 'html', 'pandoc'):
And here is a system of equations with labels in an align environment:
!bt
\begin{align}
a &= q + 4 + 5+ 6 label{eq1} \\
b &= \nabla^2 u + \nabla^4 x label{eq2}
\end{align}
!et
We can refer to (ref{eq1})-(ref{eq2}).

Many of the next environments will fail in non-latex formats.
Testing multiline:
!bt
\begin{multline}
a = b = q + \\
  f + \nabla\cdot\nabla u
label{multiline:eq1}
\end{multline}
!et
Testing split:
!bt
\begin{equation}
label{split:envir:eq}
\begin{split}
a = b = q &+ \\
  & f + \nabla\cdot\nabla u
\end{split}
\end{equation}
!et
We can refer to the last equation by (ref{split:envir:eq}).

Testing gather:
!bt
\begin{gather}
a = b \\
c = d + 7 + 9
\end{gather}
!et

Testing alignat:
!bt
\begin{alignat}{2}
a &= q + 4 + 5+ 6\qquad & \mbox{for } q\geq 0 label{eq1a} \\
b &= \nabla^2 u + \nabla^4 x & x\in\Omega label{eq2a}
\end{alignat}
!et
Let us refer to (ref{eq1})-(ref{eq2}) again, and to the
alignat variant (ref{eq1a})-(ref{eq2a}), and to (ref{my:eq1}).

Testing eqnarray:
!bt
\begin{eqnarray}
{\partial u\over\partial t} &=& \nabla^2 u + f, label{myeq1}\\
{\partial v\over\partial t} &=& \nabla\cdot(q(u)\nabla v) + g label{myeq2}
\end{eqnarray}
!et
% endif

More mathematical typesetting is demonstrated in the coming exercises.

Below, we have Problem ref{demo:ex:1} and Project ref{demo:ex:2},
as well as Projects ref{proj:circle1} and ref{exer:you}, and in
between there we have Exercise ref{exer:some:formula}.

======= Exercises =======

===== Problem: Flip a Coin =====
label{demo:ex:1}
files = flip_coin.py, flip_coin.pdf
solutions = mysol.txt, mysol_flip_coin.py
keywords = random numbers; Monte Carlo simulation

# Torture tests
file=myfile_should_be_a_part_of_the_text
solutions = mysol.txt, mysol_flip_coin.py, yet_another.file

Make a program that simulates flipping a coin $N$ times.
Print out "tail" or "head" for each flip and
let the program count the number of heads.

!bhint
Use `r = random.random()` and define head as `r <= 0.5`.
!ehint

# Test syntax error

  !bhint
Draw an integer among $\{1,2\}$ with
`r = random.randint(1,2)` and define head when `r` is 1.
  !ehint

!bans
If the `random.random()` function returns a number $<1/2$, let it be
head, otherwise tail. Repeat this $N$ number of times.
!eans

!bsol
!bc pycod
import sys, random
N = int(sys.argv[1])
heads = 0
for i in range(N):
    r = random.random()
    if r <= 0.5:
        heads += 1
print 'Flipping a coin %d times gave %d heads' % (N, heads)
!ec
!esol

=== Remarks ===

Remarks with such a subsubsection heading would previously mark
the beginning of a new exercise and cause trouble. Maybe a list

 o Mark 1.
 o Mark 2.

===== Not an exercise =====

Should be possible to stick a normal section in the middle of many
exercises.

===== Project: Compute a Probability =====

# Minimalistic exercise

label{demo:ex:2}

What is the probability of getting a number between 0.5 and 0.6 when
drawing uniformly distributed random numbers from the interval $[0,1)$?

!bhint
To answer this question empirically, let a program
draw $N$ such random numbers using Python's standard `random` module,
count how many of them, $M$, that fall in the interval $(0.5,0.6)$, and
compute the probability as $M/N$.
!ehint

===== Project: Explore Distributions of Random Circles =====

label{proj:circle1}
file=circles.pdf

The formula for a circle is given by

!bt
\begin{align}
x &= x_0 + R\cos 2\pi t,\\
y &= y_0 + R\sin 2\pi t,
\end{align}
!et
where $R$ is the radius of the circle, $(x_0,y_0)$ is the
center point, and $t$ is a parameter in the unit interval $[0,1]$.
For any $t$, $(x,y)$ is a point on the circle.
The formula can be used to generate `n` points on a circle:

!bc pypro
import numpy as np

def circle(R, x0, y0, n=501):
    t = np.linspace(0, 1, n)
    x = x0 + R*np.cos(2*np.pi*t)
    y = y0 + R*np.sin(2*np.pi*t)
    return x, y

x, y = circle(2.0, 0, 0)
!ec

# Often in an exercise we have some comments about the solution
# which we normally want to keep where they are.

The goal of this project is to draw $N$ circles with random
center and radius. Plot each circle using the `circle` function
above.

!bsubex
Let $R$ be normally distributed and $(x_0,y_0)$ uniformly distributed.

!bans
Here goes the short answer to part a).
!eans

!bsol
Here goes a full solution to part a).
!esol

!bhint
Use the `numpy.random` module to draw the
$x_0$, $y_0$, and $R$ quantities.
!ehint

!esubex

!bsubex
Let $R$ be uniformly distributed and $(x_0,y_0)$ normally distributed.

file=norm.py  # test local filename for subexercise
!esubex

!bsubex
Let $R$ and $(x_0,y_0)$ be normally distributed.
!esubex

!bremarks
At the very end of the exercise it may be appropriate to summarize
and give some perspectives.
!eremarks

===== Exercise: Determine some Distance =====
label{exer:dist}

Intro to this exercise. Questions are in subexercises below.

!bsubex
Subexercises are numbered a), b), etc.

file=subexer_a.pdf

!bans
Short answer to subexercise a).
With math in answer: $a=b$.
!eans

!bhint
First hint to subexercise a).
With math $a=b$ in hint:

!bt
\[ a=b. \]
!et
And with code returning $x+1$ in hint:

!bc
def func(x):
    return x + 1  # with code in hint
!ec
!ehint

!bhint
Second hint to subexercise a).
!ehint
!esubex

!bsubex
Here goes the text for subexercise b).

file=subexer_b.pdf

Some math $\cos^2 x + \sin^2 x = 1$ written one a single line:

!bt
\[ \cos^2 x + \sin^2 x = 1 \thinspace .\]
!et

!bhint
A hint for this subexercise.
!ehint

!bsol
Here goes the solution of this subexercise.
!esol
!esubex

!bremarks
Some final closing remarks, e.g., summarizing the main findings
and their implications in other problems can be made. These
remarks will appear at the end of the typeset exercise.
!eremarks

!bsol
Here goes a full solution of the whole exercise.
With some math $a=b$ in this solution:
!bt
\[ \hbox{math in solution: } a = b \]
!et
And code `a=b` in this solution:
!bc
a = b  # code in solution
!ec
End of solution is here.
!esol

#  No meaning in this weired test example:
The text here belongs to the main (intro) part of the exercise. Need
closing remarks to have text after subexercises.


===== {Exercise}: Some exercise without the "Exercise:" prefix =====

# Another minimalistic exercise

Just some text. And some math saying that $e^0=1$ on a single line,
to test that math block insertion is correct:

!bt
\[ \exp{(0)} = 1 \]
!et

And a test that the code `lambda x: x+2` is correctly placed here:

!bc
lambda x: x+2
!ec

===== Example: Just an example =====

# This example needs the --examples-as-exercises option, otherwise
# it is just typeset as it is written.

!bsubex
What is the capital of Norway?

!bans
Oslo.
!eans
!esubex

======= Here goes another section =======

With some text, before we continue with exercises.

======= More Exercises =======

===== Exercise: Make references to projects and problems =====

label{exer:some:formula}
file=verify_formula.py

Pick a statement from Project ref{proj:circle1} or Problem ref{demo:ex:1}
and verify it.


% if FORMAT in ('rst', 'sphinx', 'html'):
===== Project: References in a headings do not work well in ${FORMAT} =====
% else:
===== Project: References to Project ref{demo:ex:2} in a heading works for ${FORMAT} =====
% endif

label{exer:you}
file=selc_composed.pdf

Refer to the previous exercise as Exercise ref{exer:some:formula},
the two before that as Projects ref{demo:ex:2} and ref{proj:circle1},
and this one as Project ref{exer:you}.

======= References =======

BIBFILE: papers.pub


======= Appendix: Just for testing; part I =======

This is the first appendix.

===== A subsection within an appendix =====

Some text.

======= Appendix: Just for testing; part II =======

This is more stuff for an appendix.

===== Appendix: Testing identical titles =====

Without label.

===== Appendix: Testing identical titles =====
label{test:title:id1}

With label.

===== Appendix: Testing identical titles =====
label{test:title:id2}

With label.

===== Appendix: Testing identical titles =====

Without label.

!bhint
Here is a hint.
!ehint

!bwarning

=== Let's try a little heading ===

And here is a warning about something to pay attention to. We
test how the heading behave and add quite some extra texts
in comparison with the other admons.
!ewarning

!bsummary
Much testing in this document, otherwise stupid content.
!esummary

!bnotice
Ah, we are close to the end.
With math:
!bt
\[ p=q\]
!et
!enotice

!bquestion
So, how many admonition environments does Doconce support?
!equestion

===== Appendix: Testing inline comments =====

Projects that you want to share among several computers or project
workers are today most conveniently stored at some web site "in the
cloud" and updated through communication with that site. [hpl:
not sure if in the cloud is understood by all.] I strongly
recommend you to use such sites for all serious programming and
scientific writing work -- and all other important files.

The simplest services for hosting project files is Dropbox. [mp: Simply
go to URL:"http://dropbox.com" and watch the video.] It is very easy to get
started with Dropbox, and it allows you to share files among
laptops and mobile units.

When several people may edit files simultaneously, it can be difficult
detect who did what when, roll back to previous versions, and to
manually merge the edits when these are incompatible. Then one needs
more sophisticated tools than Dropbox: project hosting services with
true version control systems.  [hpl: The following text aims at providing
you with the minimum information to started with such
systems. Numerous other tutorials contain more comprehensive material
and in-depth explanations of the concepts and tools.]

===== Appendix: Testing headings ending with `verbatim inline` =====

The point here is to test 1) `verbatim` code in headings, and 2)
ending a heading with verbatim code as this triggers a special
case in LaTeX.

